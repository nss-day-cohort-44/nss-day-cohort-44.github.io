{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useRef } from 'react';\nimport classNames from 'classnames';\nimport BaseOverlay from 'react-overlays/Overlay';\nimport safeFindDOMNode from 'react-overlays/safeFindDOMNode';\nimport usePopperMarginModifiers from './usePopperMarginModifiers';\nimport Fade from './Fade';\nvar defaultProps = {\n  transition: Fade,\n  rootClose: false,\n  show: false,\n  placement: 'top'\n};\n\nfunction wrapRefs(props, arrowProps) {\n  var ref = props.ref;\n  var aRef = arrowProps.ref;\n\n  props.ref = ref.__wrapped || (ref.__wrapped = function (r) {\n    return ref(safeFindDOMNode(r));\n  });\n\n  arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = function (r) {\n    return aRef(safeFindDOMNode(r));\n  });\n}\n\nfunction Overlay(_ref) {\n  var overlay = _ref.children,\n      transition = _ref.transition,\n      _ref$popperConfig = _ref.popperConfig,\n      popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig,\n      outerProps = _objectWithoutPropertiesLoose(_ref, [\"children\", \"transition\", \"popperConfig\"]);\n\n  var popperRef = useRef({});\n\n  var _usePopperMarginModif = usePopperMarginModifiers(),\n      ref = _usePopperMarginModif[0],\n      marginModifiers = _usePopperMarginModif[1];\n\n  var actualTransition = transition === true ? Fade : transition || null;\n  return (\n    /*#__PURE__*/\n    React.createElement(BaseOverlay, _extends({}, outerProps, {\n      ref: ref,\n      popperConfig: _extends({}, popperConfig, {\n        modifiers: marginModifiers.concat(popperConfig.modifiers || [])\n      }),\n      transition: actualTransition\n    }), function (_ref2) {\n      var _state$modifiersData$;\n\n      var overlayProps = _ref2.props,\n          arrowProps = _ref2.arrowProps,\n          show = _ref2.show,\n          update = _ref2.update,\n          _ = _ref2.forceUpdate,\n          placement = _ref2.placement,\n          state = _ref2.state,\n          props = _objectWithoutPropertiesLoose(_ref2, [\"props\", \"arrowProps\", \"show\", \"update\", \"forceUpdate\", \"placement\", \"state\"]);\n\n      wrapRefs(overlayProps, arrowProps);\n      var popper = Object.assign(popperRef.current, {\n        state: state,\n        scheduleUpdate: update,\n        placement: placement,\n        outOfBoundaries: (state == null ? void 0 : (_state$modifiersData$ = state.modifiersData.hide) == null ? void 0 : _state$modifiersData$.isReferenceHidden) || false\n      });\n      if (typeof overlay === 'function') return overlay(_extends({}, props, overlayProps, {\n        placement: placement,\n        show: show\n      }, !transition && show && {\n        className: 'show'\n      }, {\n        popper: popper,\n        arrowProps: arrowProps\n      }));\n      return (\n        /*#__PURE__*/\n        React.cloneElement(overlay, _extends({}, props, overlayProps, {\n          placement: placement,\n          arrowProps: arrowProps,\n          popper: popper,\n          className: classNames(overlay.props.className, !transition && show && 'show'),\n          style: _extends({}, overlay.props.style, overlayProps.style)\n        }))\n      );\n    })\n  );\n}\n\nOverlay.defaultProps = defaultProps;\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}