{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Dropdown from './Dropdown';\nimport NavLink from './NavLink';\nvar NavDropdown =\n/*#__PURE__*/\nReact.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      rootCloseEvent = _ref.rootCloseEvent,\n      menuRole = _ref.menuRole,\n      disabled = _ref.disabled,\n      active = _ref.active,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"title\", \"children\", \"bsPrefix\", \"className\", \"rootCloseEvent\", \"menuRole\", \"disabled\", \"active\", \"renderMenuOnMount\"]);\n  /* NavItem has no additional logic, it's purely presentational. Can set nav item class here to support \"as\" */\n\n\n  var navItemPrefix = useBootstrapPrefix(undefined, 'nav-item');\n  return (\n    /*#__PURE__*/\n    React.createElement(Dropdown, _extends({\n      ref: ref\n    }, props, {\n      className: classNames(className, navItemPrefix)\n    }),\n    /*#__PURE__*/\n    React.createElement(Dropdown.Toggle, {\n      id: id,\n      eventKey: null,\n      active: active,\n      disabled: disabled,\n      childBsPrefix: bsPrefix,\n      as: NavLink\n    }, title),\n    /*#__PURE__*/\n    React.createElement(Dropdown.Menu, {\n      role: menuRole,\n      renderOnMount: renderMenuOnMount,\n      rootCloseEvent: rootCloseEvent\n    }, children))\n  );\n});\nNavDropdown.displayName = 'NavDropdown';\nNavDropdown.Item = Dropdown.Item;\nNavDropdown.ItemText = Dropdown.ItemText;\nNavDropdown.Divider = Dropdown.Divider;\nNavDropdown.Header = Dropdown.Header;\nexport default NavDropdown;","map":null,"metadata":{},"sourceType":"module"}